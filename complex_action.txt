    /*
    pub fn apply_action_complex(&self, action: &Option<Action>) {
        if action.is_some() {
            let action: &Action = action.as_ref().unwrap();
            let src_count: u32 = next.tiles[action.src.y][action.src.x].count;
            let src_owner: usize = next.tiles[action.src.y][action.src.x].owner;

            let mut dst = &mut next.tiles[action.dst.y][action.dst.x];
            let dst_owner: usize = dst.owner;

            if dst.owner < self.player_count {
                if dst_owner == src_owner {
                    dst.count += src_count - 1;
                } else if src_count - 1 > dst.count {
                    if dst.kind == TileType::Plain {
                        next.scores[src_owner] -= (dst.count - (src_count - 1)) as u32;
                        next.scores[dst_owner] -= dst.count as u32;
                        next.land[dst_owner] -= 1;
                        next.land[src_owner] += 1;
                        dst.count = src_count - 1 - dst.count;
                        dst.owner = src_owner;
                    } else if dst.kind == TileType::City {
                        next.scores[src_owner] -= (dst.count - (src_count - 1)) as u32;
                        next.scores[dst_owner] -= dst.count as u32;
                        next.land[dst_owner] -= 1;
                        next.land[src_owner] += 1;
                        dst.count = src_count - 1 - dst.count;
                        dst.owner = src_owner;
                        next.cities[dst_owner] -= 1;
                        next.cities[src_owner] += 1;
                    } else if dst.kind == TileType::General {
                        dst.kind = TileType::City;

                        // Transfer score first from general battle.
                        next.scores[src_owner] -= (dst.count - (src_count - 1)) as u32;
                        next.scores[dst_owner] -= dst.count as u32;

                        // Now transfer score to winner.
                        next.scores[src_owner] += next.scores[dst_owner];
                        next.scores[dst_owner] = 0;

                        next.land[src_owner] += next.land[dst_owner];
                        next.land[dst_owner] = 0;

                        next.cities[src_owner] += next.cities[dst_owner];
                        next.cities[dst_owner] = 0;

                        // Correct model here is to generate with random probabilities
                        // what squares this player might have owned, and transfer them
                        // as part of the state transfer weight. This isn't feasible,
                        // instead just always terminate search here as being good.
                    } else {
                        panic!("Bad tile found.");
                    }
                } else {
                    dst.count = dst.count - (src_count - 1);
                }
            } else if dst.kind == TileType::City {
                if src_count - 1 > dst.count {
                    next.cities[src_owner] += 1;
                    next.land[src_owner] += 1;
                    dst.owner = src_owner;
                } else {
                    // TODO: City will start regenerating units. Implement that.
                    dst.count -= src_count - 1;
                }
            } else {
                assert_eq!(dst.kind, TileType::Plain);
                assert!(src_count > 1);
                dst.count = src_count - 1;
                dst.owner = src_owner;
                next.land[src_owner] += 1;
            }
        }
        if action.is_some() {
            let action: &Action = action.as_ref().unwrap();
            next.tiles[action.src.y][action.src.x].count = 1;
        }

        next.player_turn = (next.player_turn + 1) % next.scores.len();
        if next.player_turn == 0 {
            next.global_turn += 1;
        }

        if next.player_turn == 0 && next.global_turn % 50 == 0 {
            for i in 0..next.height {
                for j in 0..next.width {
                    let owner: usize = next.tiles[i][j].owner as usize;
                    if owner < self.player_count {
                        let owned_cities = next.cities[owner];
                        next.tiles[i][j].count += owned_cities;
                        next.scores[owner] += owned_cities;
                    }
                }
            }
        }
        else if next.player_turn == 0 && next.global_turn % 2 == 0 {
            for i in 0..next.height {
                for j in 0..next.width {
                    let owner: usize = next.tiles[i][j].owner as usize;
                    if owner < self.player_count && (next.tiles[i][j].kind == TileType::City || next.tiles[i][j].kind == TileType::General) {
                        let owned_cities = next.cities[owner];
                        next.tiles[i][j].count += owned_cities;
                        next.scores[owner] += owned_cities;
                    }
                }
            }
        }

        next*
    }*/